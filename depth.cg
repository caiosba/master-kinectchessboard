//Cg
//Cg profile arbvp1 arbfp1

/* Sent by shader, specific for each Kinect */
float resX = 640;
float resY = 480;
float fovH = 1.02102;
float fovV = 0.79587;
float xzFactor = 1.12005;
float yzFactor = 0.840723;

/**
 * Converts the position to world position.
 */
float3 getWorldPos(in float3 pos){
  float normX = pos.x / resX - 0.5f;
  float normY = 0.5f - pos.y / resY;
  
  float3 pworld;
  pworld.x = normX * pos.z * xzFactor;
  pworld.y = normY * pos.z * yzFactor;
  pworld.z = pos.z;
  
  return pworld * 0.001;
}

/**
 * Vertex Shader.
 * Get depth value of the texture, transform to world space (3D) and shift vertexes accordingly.
 */
float4 vshader(
  in float4 vtx_position : POSITION,     /* Vertex position on model space */
  in uniform float4x4 mat_modelproj,     /* Transformation matrix from model to clip space (directly) */
  in uniform sampler2D tex_0 : TEXUNIT0, /* Depth */
  in uniform sampler2D tex_1 : TEXUNIT1, /* RGB */
  out float4 l_vtx_color : TEXCOORD1     /* Vertex final color for Fragment Shader */ 
) : POSITION 
{
  /* Get this vertex's corresponding pixel on depth map */
  float depthValue = tex2D(tex_0, vtx_position.xy / float2(resX, -resY)).r * 65535;
  
  /* Get pixel color from RGB map */
  l_vtx_color = float4(tex2D(tex_1, vtx_position.xy / float2(resX, -resY)).rgb, 1.0f);
  
  /* Transform position to world space (which is the model, actually) */
  float4 world_pos = float4(getWorldPos(float3(vtx_position.x, vtx_position.y, depthValue)), 1);
    
  /* Return the position on clip space for the fragment shader */
  return mul(mat_modelproj, float4(world_pos.xyz, 1));
}

void fshader(in float4 l_vtx_position : TEXCOORD0, 
             in float4 l_vtx_color : TEXCOORD1, 
             in uniform sampler2D tex_1 : TEXUNIT1,
             out float4 o_color : COLOR)
{
  o_color = l_vtx_color;
  //FIXME o_color = float4(tex2D(tex_1, l_vtx_position.xy / float2(resX, -resY)).rgb, 1.0f);
  //FIXME if (l_vtx_position.z < 1.0f) o_color.a = 0.0f;
}
